# Generated by Django 4.2.17 on 2024-12-07 21:10

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='Username must consist of @ followed by at least three alphanumericals', regex='^@\\w{3,}$')])),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_student', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ProgrammingLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
            options={
                'ordering': ['start_date'],
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('room_number', models.CharField(blank=True, max_length=50)),
                ('capacity', models.PositiveIntegerField(blank=True, help_text='Optional', null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TutorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='Short biography or background.')),
                ('experience_years', models.PositiveIntegerField(default=0, help_text='Number of years of tutoring experience.')),
                ('contact_number', models.CharField(blank=True, help_text='Optional contact number.', max_length=15)),
                ('languages', models.ManyToManyField(blank=True, help_text='Programming languages this tutor can teach.', to='tutorials.programminglanguage')),
                ('specializations', models.ManyToManyField(blank=True, help_text='Advanced topics this tutor can teach.', to='tutorials.specialization')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tutor_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tutor Profile',
                'verbose_name_plural': 'Tutor Profiles',
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_number', models.CharField(blank=True, max_length=15)),
                ('preferred_communication_method', models.CharField(blank=True, help_text='e.g. email, phone', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional information about the student.')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Profile',
                'verbose_name_plural': 'Student Profiles',
            },
        ),
        migrations.CreateModel(
            name='LessonRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequency', models.CharField(choices=[('weekly', 'Weekly'), ('fortnightly', 'Every other week')], default='weekly', max_length=20)),
                ('duration_minutes', models.PositiveIntegerField(default=60, help_text='Duration of each lesson in minutes')),
                ('requested_start_time', models.TimeField(help_text='Preferred start time for the lesson')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('allocated', 'Allocated'), ('rejected', 'Rejected')], default='pending', help_text='The status of the request. Admin sets this manually.', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes from the student.')),
                ('requested_languages', models.ManyToManyField(blank=True, help_text='Programming languages the student wants to learn.', to='tutorials.programminglanguage')),
                ('requested_specializations', models.ManyToManyField(blank=True, help_text='Specialized areas the student wants to focus on.', to='tutorials.specialization')),
                ('requested_venue', models.ForeignKey(blank=True, help_text='Preferred venue for the lessons (if any).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_lessons', to='tutorials.venue')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_requests', to='tutorials.studentprofile')),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_requests', to='tutorials.term')),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(help_text='First date of this lesson in the term.')),
                ('start_time', models.TimeField(help_text='Start time of the lesson.')),
                ('frequency', models.CharField(choices=[('weekly', 'Weekly'), ('fortnightly', 'Every other week')], default='weekly', help_text='How often the lesson occurs.', max_length=20)),
                ('duration_minutes', models.PositiveIntegerField(default=60, help_text='Duration of each lesson in minutes.')),
                ('active', models.BooleanField(default=True, help_text='Whether the lesson is currently active this term.')),
                ('notes', models.TextField(blank=True, help_text='Additional notes for this lesson (e.g., cancellations, changes).')),
                ('request', models.ForeignKey(blank=True, help_text='The original request that led to this lesson, if any.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lessons', to='tutorials.lessonrequest')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='tutorials.studentprofile')),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='tutorials.term')),
                ('tutor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='tutorials.tutorprofile')),
                ('venue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lessons', to='tutorials.venue')),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('issued_date', models.DateField(auto_now_add=True)),
                ('paid_date', models.DateField(blank=True, help_text='Date the invoice was paid. Left blank if not yet paid.', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes regarding the invoice.')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='tutorials.studentprofile')),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='tutorials.term')),
            ],
            options={
                'ordering': ['-issued_date'],
            },
        ),
    ]
